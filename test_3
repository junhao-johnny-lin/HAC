// --- cuda_kernels.cu ---
// Bevat alleen CUDA kernels en launch-functies

#include <cuda_runtime.h>
#include <device_launch_parameters.h>

#define IMG_WIDTH 640
#define IMG_HEIGHT 480
#define FILTER_WIDTH 3

__constant__ float d_filter[FILTER_WIDTH * FILTER_WIDTH];

__global__ void conv2D(const unsigned char* input, unsigned char* output, int width, int height) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y * blockDim.y + threadIdx.y;

    if (x >= width || y >= height) return;

    float sum = 0.0f;
    for (int ky = -1; ky <= 1; ky++) {
        for (int kx = -1; kx <= 1; kx++) {
            int ix = min(max(x + kx, 0), width - 1);
            int iy = min(max(y + ky, 0), height - 1);
            float pixel = input[iy * width + ix];
            float weight = d_filter[(ky + 1) * FILTER_WIDTH + (kx + 1)];
            sum += pixel * weight;
        }
    }
    output[y * width + x] = (unsigned char)min(max(int(sum), 0), 255);
}

__global__ void maxPool(const unsigned char* input, unsigned char* output, int width, int height) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y * blockDim.y + threadIdx.y;

    int ox = x * 2;
    int oy = y * 2;
    if (ox + 1 >= width || oy + 1 >= height) return;

    unsigned char maxVal = 0;
    for (int dy = 0; dy < 2; dy++) {
        for (int dx = 0; dx < 2; dx++) {
            unsigned char val = input[(oy + dy) * width + (ox + dx)];
            if (val > maxVal) maxVal = val;
        }
    }
    output[y * (width / 2) + x] = maxVal;
}

__global__ void minPool(const unsigned char* input, unsigned char* output, int width, int height) {
    int x = blockIdx.x * blockDim.x + threadIdx.x;
    int y = blockIdx.y * blockDim.y + threadIdx.y;

    int ox = x * 2;
    int oy = y * 2;
    if (ox + 1 >= width || oy + 1 >= height) return;

    unsigned char minVal = 255;
    for (int dy = 0; dy < 2; dy++) {
        for (int dx = 0; dx < 2; dx++) {
            unsigned char val = input[(oy + dy) * width + (ox + dx)];
            if (val < minVal) minVal = val;
        }
    }
    output[y * (width / 2) + x] = minVal;
}

extern "C" void launchKernels(unsigned char* d_input, unsigned char* d_conv, unsigned char* d_max, unsigned char* d_min, float* h_filter) {
    cudaMemcpyToSymbol(d_filter, h_filter, FILTER_WIDTH * FILTER_WIDTH * sizeof(float));

    dim3 blockSize(16, 16);
    dim3 gridSize((IMG_WIDTH + 15) / 16, (IMG_HEIGHT + 15) / 16);

    conv2D<<<gridSize, blockSize>>>(d_input, d_conv, IMG_WIDTH, IMG_HEIGHT);
    maxPool<<<gridSize, blockSize>>>(d_input, d_max, IMG_WIDTH, IMG_HEIGHT);
    minPool<<<gridSize, blockSize>>>(d_input, d_min, IMG_WIDTH, IMG_HEIGHT);
}


// --- main.cpp ---
// Hoofdprogramma dat kernels aanroept en OpenCV gebruikt

#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <stdio.h>
#include <stdlib.h>

using namespace cv;

#define IMG_WIDTH 640
#define IMG_HEIGHT 480
#define FILTER_WIDTH 3

extern "C" void launchKernels(unsigned char* d_input, unsigned char* d_conv, unsigned char* d_max, unsigned char* d_min, float* h_filter);

void saveImage(const char* name, unsigned char* data, int width, int height) {
    Mat out(height, width, CV_8UC1, data);
    imwrite(name, out);
}

int main(int argc, char** argv) {
    if (argc < 2) {
        printf("Usage: %s <image_path>\n", argv[0]);
        return 1;
    }

    Mat img = imread(argv[1], IMREAD_GRAYSCALE);
    if (img.empty()) {
        printf("Image load failed!\n");
        return -1;
    }

    unsigned char *d_input, *d_conv, *d_max, *d_min;
    size_t imgSize = IMG_WIDTH * IMG_HEIGHT;
    size_t pooledSize = (IMG_WIDTH / 2) * (IMG_HEIGHT / 2);

    cudaMalloc(&d_input, imgSize);
    cudaMalloc(&d_conv, imgSize);
    cudaMalloc(&d_max, pooledSize);
    cudaMalloc(&d_min, pooledSize);
    cudaMemcpy(d_input, img.data, imgSize, cudaMemcpyHostToDevice);

    float h_filter[FILTER_WIDTH * FILTER_WIDTH] = {
        0, -1, 0,
       -1, 5, -1,
        0, -1, 0
    };

    launchKernels(d_input, d_conv, d_max, d_min, h_filter);

    unsigned char* h_conv = (unsigned char*)malloc(imgSize);
    unsigned char* h_max = (unsigned char*)malloc(pooledSize);
    unsigned char* h_min = (unsigned char*)malloc(pooledSize);

    cudaMemcpy(h_conv, d_conv, imgSize, cudaMemcpyDeviceToHost);
    cudaMemcpy(h_max, d_max, pooledSize, cudaMemcpyDeviceToHost);
    cudaMemcpy(h_min, d_min, pooledSize, cudaMemcpyDeviceToHost);

    saveImage("convolved.png", h_conv, IMG_WIDTH, IMG_HEIGHT);
    saveImage("maxpooled.png", h_max, IMG_WIDTH / 2, IMG_HEIGHT / 2);
    saveImage("minpooled.png", h_min, IMG_WIDTH / 2, IMG_HEIGHT / 2);

    cudaFree(d_input);
    cudaFree(d_conv);
    cudaFree(d_max);
    cudaFree(d_min);
    free(h_conv);
    free(h_max);
    free(h_min);

    return 0;
}


// --- Makefile ---
# Bouw CUDA en C++ bestanden afzonderlijk en link ze samen

CUDA_PATH ?= /usr/local/cuda

all:
	nvcc -c cuda_kernels.cu -o cuda_kernels.o
	g++ -std=c++11 main.cpp cuda_kernels.o -o cuda_image_processing `pkg-config --cflags --libs opencv4` -L$(CUDA_PATH)/lib64 -lcudart

clean:
	rm -f *.o cuda_image_processing *.png
